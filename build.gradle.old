plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'org.simreal.annotaion'
archivesBaseName = "minireal-annotation"
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'com.squareup:javapoet:1.11.1'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation 'com.google.code.gson:gson:2.9.1'
    compileOnly 'com.google.auto.service:auto-service:1.0-rc6'
    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc6'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
    implementation 'org.springframework.kafka:spring-kafka:2.8.0'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

//    implementation files('libs/mason.20.jar')

}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task javadocJar(type: Jar) {
    ext.classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    ext.classifier = 'sources'
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}

artifacts {
    archives javadocJar, sourcesJar
}


// MAVEN !
publish {
    dependsOn build
}

//publishing {
//    publications {
//        myLib(MavenPublication) {
//            from components.java
//        }
//    }
//    repositories {
//        maven {
//            name = "GitHubPackages" //  optional target repository name
//            url = uri("https://maven.pkg.github.com/panderior/minireal-annotation-processor")
//            credentials {
//                username = System.getProperty('ossrhUsername')
//                password = System.getProperty('ossrhPassword')
//            }
//        }
//    }
//}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenArtifact artifact -> signing.signPom(artifact) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getProperty('ossrhUsername'), password: System.getProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getProperty('ossrhUsername'), password: System.getProperty('ossrhPassword'))
            }

            pom.project {
                name 'Example Application'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A application used as an example on how to set up pushing  its components to the Central Repository.'
                url 'http://www.example.com/example-application'

                scm {
                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'http://foo.googlecode.com/svn/trunk/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'manfred'
                        name 'Manfred Moser'
                        email 'manfred@sonatype.com'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}



test {
    useJUnitPlatform()
}